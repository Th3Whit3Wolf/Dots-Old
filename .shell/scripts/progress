#!/bin/bash

progress() {
    usage(){
        echo "Usage: progress [options]"
        echo "  --help, -h                                              Print this message"
        echo "  redox                            Add git files"
        echo "  remacs                        Add git files"
        echo "  servo           Cherry-pick commit"
        echo "  xray                   Add/Change Branch"
        return 1
    }
    prog() {
        : strin program
        PROG='/home/doc/git/'${1}
        NAME=$(echo  ${1} | sed -e "s/\b\(.\)/\u\1/g" )
        echo "Refreshing $NAME"
        sleep 1
        git -C $PROG pull
        clear

        OLD_VERS=$(git -C $PROG.old log -n 1 --pretty=format:%cd | awk '{print $2" "$3" "$5}')
        OLD_COMMITS=$(git -C $PROG.old rev-list HEAD --count | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
        OLD_SIZE=$(/bin/du -h $PROG.old | tail -n1 | awk '{print $1}')
        NEW_VERS=$(git -C $PROG log -n 1 --pretty=format:%cd | awk '{print $2" "$3" "$5}')
        NEW_COMMITS=$(git -C $PROG rev-list HEAD --count | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
        NEW_SIZE=$(/bin/du -h $PROG | tail -n1 | awk '{print $1}')

        echo -e $NAME $OLD_VERS "with" $OLD_COMMITS "commits Directory Size:" $OLD_SIZE

        tokei -s lines -t=Rust,C,'C Header',C++,'C++ Header',Go,Python,Java,Perl,PHP,Ruby,'FORTRAN Legacy',Pascal,Ada  $PROG.old

        #tokei | head -n10 $PROG.old

        echo
        echo -e $NAME  $NEW_VERS "with" $NEW_COMMITS "commits Directory Size:" $NEW_SIZE

        tokei -s lines -t=Rust,C,'C Header',C++,'C++ Header',Go,Python,Java,Perl,PHP,Ruby,'FORTRAN Legacy',Pascal,Ada  $PROG

        #tokei | head -n10 $PROG
        return 1
    }

    prog_redox() {
        a='redox'
        PROG='/home/doc/git/'${a}
        NAME=$(echo ${a} | sed -e "s/\b\(.\)/\u\1/g" )
        echo "Refreshing $NAME"
        sleep 1
        git -C $PROG pull
        clear

        OLD_VERS=$(git -C $PROG.old log -n 1 --pretty=format:%cd | awk '{print $2" "$3" "$5}')
        OLD_COMMITS=$(git -C $PROG.old rev-list HEAD --count | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
        OLD_SIZE=$(du -h $PROG.old | tail -n1 | awk '{print $1}')
        NEW_VERS=$(git -C $PROG log -n 1 --pretty=format:%cd | awk '{print $2" "$3" "$5}')
        NEW_COMMITS=$(git -C $PROG rev-list HEAD --count | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
        NEW_SIZE=$(du -h $PROG | tail -n1 | awk '{print $1}')

        echo -e $NAME $OLD_VERS "with" $OLD_COMMITS "commits Directory Size:" $OLD_SIZE

        tokei -s lines -t=Rust,C++,'C++ Header',Go,Java,'Objective C++',OCaml,Perl,PHP,Ruby,'FORTRAN Legacy',Pascal,Ada $PROG.old

        #tokei | head -n10 $PROG.old

        echo
        echo -e $NAME  $NEW_VERS "with" $NEW_COMMITS "commits Directory Size:" $NEW_SIZE

        tokei -s lines -t=Rust,C++,'C++ Header',Go,Java,'Objective C++',OCaml,Perl,PHP,Ruby,'FORTRAN Legacy',Pascal,Ada  $PROG

        #tokei | head -n10 $PROG
        return 1
    }

    prog_xray() {
        a='xray'
        PROG='/home/doc/git/'${a}
        NAME=$(echo ${a} | sed -e "s/\b\(.\)/\u\1/g" )
        echo "Refreshing $NAME"
        sleep 1
        git -C $PROG pull
        clear

        OLD_VERS=$(git -C $PROG.old log -n 1 --pretty=format:%cd | awk '{print $2" "$3" "$5}')
        OLD_COMMITS=$(git -C $PROG.old rev-list HEAD --count | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
        OLD_SIZE=$(du -h $PROG.old | tail -n1 | awk '{print $1}')
        NEW_VERS=$(git -C $PROG log -n 1 --pretty=format:%cd | awk '{print $2" "$3" "$5}')
        NEW_COMMITS=$(git -C $PROG rev-list HEAD --count | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
        NEW_SIZE=$(du -h $PROG | tail -n1 | awk '{print $1}')

        echo -e $NAME $OLD_VERS "with" $OLD_COMMITS "commits Directory Size:" $OLD_SIZE

        tokei -s lines $PROG.old

        #tokei | head -n10 $PROG.old

        echo
        echo -e $NAME  $NEW_VERS "with" $NEW_COMMITS "commits Directory Size:" $NEW_SIZE

        tokei -s lines $PROG

        #tokei | head -n10 $PROG
        return 1
    }

    case $1 in
        redox)
            prog_redox
        ;;

        remacs | servo)
            prog $1
        ;;

        xray)
            prog_xray
        ;;

        *)
            usage
        ;;
    esac
}